{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","jsimg","javaicon","App","video","useRef","_useState","useState","react_default","a","createElement","className","css","_templateObject","width","height","src","alt","_useState2","Object","slicedToArray","text","setText","useEffect","setTimeout","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","ref","muted","autoPlay","controls","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,glDCMxC,IAAMC,EACJ,iFACIC,EACJ,mFAuIaC,EArIH,WACV,IAAMC,EAAQC,mBADEC,EAEQC,mBACtBC,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFC,MAKTL,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKf,EAAOgB,IAAI,OAVhCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,EAAA,GAETe,EAFSH,EAAA,GAEHI,EAFGJ,EAAA,GA6FhB,OAhFAK,oBAAU,WACRC,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFa,MAKTjB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKd,EAAUe,IAAI,QAGlD,MACHO,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFc,MAKTlB,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKf,EAAOgB,IAAI,QAG/C,MACHO,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFe,MAKTnB,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKd,EAAUe,IAAI,QAGlD,MACHO,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFgB,MAKTpB,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKf,EAAOgB,IAAI,QAG/C,MACHO,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFiB,MAKTrB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKd,EAAUe,IAAI,QAGlD,MACHO,WAAW,WACTF,EACEd,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFkB,MAKTtB,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,GAAIC,OAAQ,GAAIC,IAAKf,EAAOgB,IAAI,QAG/C,OACF,IAEDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFmB,MAQTvB,EAAAC,EAAAC,cAAA,OACEC,UAAWC,YAAFoB,MAQRX,GAEHb,EAAAC,EAAAC,cAAA,SACEuB,IAAK7B,EACL8B,OAAO,EACPC,UAAU,EACVrB,MAAM,OACNC,OAAO,OACPqB,UAAU,GAEV5B,EAAAC,EAAAC,cAAA,UACEM,IAAI,qDACJqB,KAAK,kBC5HGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93d397d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useEffect, useState, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ReactPlayer from \"react-player\";\nimport { css } from \"react-emotion\";\n\nconst jsimg =\n  \"http://chittagongit.com//images/javascript-icon-png/javascript-icon-png-29.jpg\";\nconst javaicon =\n  \"http://logos-vector.com/images/logo/lar/1/0/7/107942/Java_Duke_a556c_250x250.png\";\n\nconst App = () => {\n  const video = useRef();\n  const [text, setText] = useState(\n    <div\n      className={css`\n        display: flex;\n        flex-direction: row;\n      `}\n    >\n      <p>Javascript mother fucker do you speak it?</p>\n      <img width={50} height={50} src={jsimg} alt=\"\" />\n    </div>\n  );\n  useEffect(() => {\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>Yes, I know Java!</p>\n          <img width={50} height={50} src={javaicon} alt=\"\" />\n        </div>\n      );\n    }, 3500);\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>so what is the meaning of THIS in javascript???</p>\n          <img width={50} height={50} src={jsimg} alt=\"\" />\n        </div>\n      );\n    }, 5500);\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>I dont want to work here!</p>\n          <img width={50} height={50} src={javaicon} alt=\"\" />\n        </div>\n      );\n    }, 8500);\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>What is your salary expectations?</p>\n          <img width={50} height={50} src={jsimg} alt=\"\" />\n        </div>\n      );\n    }, 11000);\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>1 million dollars</p>\n          <img width={50} height={50} src={javaicon} alt=\"\" />\n        </div>\n      );\n    }, 17000);\n    setTimeout(() => {\n      setText(\n        <div\n          className={css`\n            display: flex;\n            flex-direction: row;\n          `}\n        >\n          <p>OK, you are hired mother fucker!</p>\n          <img width={50} height={50} src={jsimg} alt=\"\" />\n        </div>\n      );\n    }, 19000);\n  }, []);\n  return (\n    <div className=\"App\">\n      <div\n        className={css`\n          position: relative;\n          width: 500px;\n          display: flex;\n          justify-content: center;\n          margin: 0 auto;\n        `}\n      >\n        <div\n          className={css`\n            position: absolute;\n            top: 10px;\n            right: 30px;\n            background: red;\n            z-index: 1111;\n          `}\n        >\n          {text}\n        </div>\n        <video\n          ref={video}\n          muted={true}\n          autoPlay={true}\n          width=\"100%\"\n          height=\"100%\"\n          controls={true}\n        >\n          <source\n            src=\"http://s3.amazonaws.com/static-stage/DCO/video.mp4\"\n            type=\"video/mp4\"\n          />\n        </video>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}